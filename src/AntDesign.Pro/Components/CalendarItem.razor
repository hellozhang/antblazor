
@inherits AntDomComponentBase
@using static AntDesign.Services.AliFundExt

@if (items.Count > 0)
{
    <Calendar FullScreen="@false"
              HeaderRender="HeaderRender"
              DateFullCellRender="DateCellRender" MonthFullCellRender="MonthCellRender"
              OnPanelChange="OnPanelChange" />
}

@code {


 
    [Parameter]
    public string DataCode { get; set; }
    [Parameter]
    public int DataMonth { get; set; } = 11;
    [Parameter]
    public DateTime DefaultValue { get; set; } = DateTime.Now.AddMonths(-1);
 
    private List<Item>? items = new List<Item>();
    protected override async Task OnInitializedAsync()
    {
        items = await AliFundExt.instance.GetListX(DataCode);
        // items = new List<Item>
        // {
        //  new Item{ dayOfGrowth=1,netValueDate="2023-11-20".ToDate(),netValue=1},
        //  new Item{ dayOfGrowth=-1.ToDecimal(),netValueDate="2023-11-21".ToDate(),netValue=1},
        //  new Item{ dayOfGrowth=-1.ToDecimal(),netValueDate="2023-11-22".ToDate(),netValue=1},
        //  new Item{ dayOfGrowth=3.ToDecimal(),netValueDate="2023-11-23".ToDate(),netValue=1},
        //  new Item{ dayOfGrowth=4.ToDecimal(),netValueDate="2023-11-24".ToDate(),netValue=1.3.ToDecimal()},
        // };
    }
}
@code
{
    int month; int year = 0;
    private void OnPanelChange(DateTime value, string mode)
    {
        Console.WriteLine($"{value} {mode}");
    }

    private RenderFragment GetMonthOptions()
    {
        return@<Template>
        @for (int index = 1; index <= 12; index++)
    {
        <option class="month-item" key="@index" value="@index">
            @(index)月
        </option>
    }

    </Template>;
    }

    private RenderFragment GetYearOptions(int currentYear)
    {
        return @<Template>
        @for (int i = currentYear - 10; i < currentYear + 10; i += 1)
    {
        <option class="year-item" key="@i" value="@i">
            @(i)年
        </option>
    }

    </Template>;
    }

    private void OnSelectYear(ChangeEventArgs args, CalendarHeaderRenderArgs renderArgs)
    {
        int year = Convert.ToInt32(args.Value);
        renderArgs.OnChange.InvokeAsync(DateHelper.CombineNewDate(renderArgs.Value, year: year));
    }

    private void OnSelectMonth(ChangeEventArgs args, CalendarHeaderRenderArgs renderArgs)
    {
        int month = Convert.ToInt32(args.Value);
        renderArgs.OnChange.InvokeAsync(DateHelper.CombineNewDate(renderArgs.Value, month: month));
    }

    private void OnTypeChange()
    {

    }

    private RenderFragment HeaderRender(CalendarHeaderRenderArgs args)
    {
        int start = 0;
        int end = 12;
        month = args.Value.Month;
        year = args.Value.Year;
        return
    @<Template>
        <div style="padding: 8px">
            <Title Level="4">
                Custom header
            </Title>
            <Row Gutter="8">
                <AntDesign.Col>
                    <RadioGroup size="small" OnChange="value => args.OnTypeChange.InvokeAsync(value)" Value="@args.Type" TValue="string">
                        <Radio RadioButton Value="@DatePickerType.Month">月</Radio>
                        <Radio RadioButton Value="@DatePickerType.Year">年</Radio>
                    </RadioGroup>
                </AntDesign.Col>
                <AntDesign.Col>
                    <select size="small"
                            dropdownMatchSelectWidth="@false"
                            class="my-year-select"
                            @onchange="e => OnSelectYear(e, args)"
                            value="@year">
                        @GetYearOptions(year)
                    </select>
                </AntDesign.Col>
                <AntDesign.Col>
                    <select size="small"
                            dropdownMatchSelectWidth="@false"
                            value="@month"
                            @onchange="e => OnSelectMonth(e, args)">
                        @GetMonthOptions()
                    </select>
                </AntDesign.Col>
            </Row>

        </div>
    </Template>;
    }
}

        @code
        {


    class ListData
    {
        public string type;
        public string content;
        public int valueDay;
        public decimal? grouthVal;
        public string bgColor;
        public int month;
    }

    private List<ListData> GetListData(DateTime value)
    {
        List<ListData> listData = null;
        DateTime dtNow = DateTime.Now;
        var grouthVal = items.FirstOrDefault(p => p.netValueDate == value && p.netValueDate.Month == month)?.dayOfGrowth;
        if (value.DayOfWeek == DayOfWeek.Sunday)
        {
            var startVal = items.FirstOrDefault(p => p.netValueDate == value.AddDays(-6) && p.netValueDate.Month == month)?.netValue;
            var endVal = items.FirstOrDefault(p => p.netValueDate == value.AddDays(-2) && p.netValueDate.Month == month)?.netValue;
            grouthVal = (endVal - startVal / startVal)*100;
        }
        listData = value switch
        {
            DateTime { DayOfWeek:  DayOfWeek.Saturday } s => new List<ListData> {
                        new ListData { type = "info", content = grouthVal.ToStringDefault(),valueDay=value.Day,month=value.Month,bgColor="#f0f0f0",grouthVal=grouthVal },  },
            DateTime { DayOfWeek: DayOfWeek.Sunday  } s => new List<ListData> {
                        new ListData { type = "info", content = grouthVal.ToStringDefault(),valueDay=value.Day,month=value.Month,bgColor=month==value.Month&&grouthVal!=null?(grouthVal>0?"#f5222d":"#52c41a"):"#bfbfbf",grouthVal=grouthVal },  },
            _ => new List<ListData> {
                        new ListData { type = "info", content = grouthVal.ToStringDefault(),valueDay=value.Day,month=value.Month,grouthVal=grouthVal,bgColor=month==value.Month&&grouthVal!=null?(grouthVal>0?"#f5222d":"#52c41a"):"#bfbfbf" },
                                                                                  }
        };


        return listData ?? new List<ListData>();
    }

    private RenderFragment DateCellRender(DateTime value)
    {
        var listData = GetListData(value);
        return @<Template>
        <ul class="events" style="width:40px; ">
            @foreach (var data in listData)
        {
        if(month==value.Month&&data.grouthVal!=null){
            <li key="@data.valueDay" style="background-color: @(data.bgColor);color:#fff;font-family:'Cascadia Code';font-weight:bolder;">
                @data.valueDay
            </li>
            <li key="@data.content" style="background: @(data.bgColor) ;border:none;color:#fff;">
                @(data.content)
            </li>
        }
        else
        {
            <li key="@data.valueDay" style="font-family:'Cascadia Code';background-color:@(data.bgColor);color:#333;font-weight:bolder;">
                @data.valueDay
            </li>
            <li key="@data.content" style="display:@(!data.content.IsNullOrEmpty());border:none;background: @(data.bgColor) ;">
                @(data.content)
            </li>
            <li key="@data.content" style="display:@(data.content.IsNullOrEmpty());border:none;background: @(data.bgColor) ;">
                &nbsp;&nbsp;
            </li>
        }
       }
        </ul>
    </Template>
    ;
    }

    private int? GetMonthData(DateTime value)
    {
        return value.Month;
    }

    private RenderFragment MonthCellRender(DateTime value)
    {
        int? num = GetMonthData(value);
        var fistDay = items.Where(p => p.netValueDate.Month == num).FirstOrDefault();
        var lastDay = items.Where(p => p.netValueDate.Month == num).LastOrDefault();
        var grouthVal = (lastDay?.netValue - fistDay?.netValue / fistDay?.netValue) * 100;
        var bgColor = grouthVal != null ? (grouthVal > 0 ? "#f5222d" : "#52c41a") : "#bfbfbf";
        return @<Template>
        <ul class="events" style="width:40px; ">
            <li key="@num" style="background-color: @(bgColor);color:#fff;font-family:'Cascadia Code';font-weight:bolder;">
                @num
            </li>
            <li key="@num" style="font-family:'Cascadia Mono';display:@(grouthVal!=null?"block":"none");background: @(bgColor) ;border:none;color:#fff;">
                @grouthVal
            </li>
            <li key="@(num)" style="font-family:'Cascadia Mono';display:@(grouthVal==null?"block":"none");background: @(bgColor) ;border:none;color:#fff;">
                &nbsp; &nbsp; 
            </li>
        </ul>
    </Template>;
    }
    }
<style>
    .site-calendar-demo-card {
        width: 350px;
        height: 350px;
        border: 1px solid #f0f0f0;
        border-radius: 2px;
    }

    .events {
        list-style: none;
        margin: 0;
        padding: 0;
        border: 1px sold #cecece;
    }

        .events .ant-badge-status {
            overflow: hidden;
            white-space: nowrap;
            width: 100%;
            text-overflow: ellipsis;
            font-size: 12px;
        }

    .notes-month {
        text-align: center;
        font-size: 14px;
    }

        .notes-month section {
            font-size: 14px;
        }

    .ant-picker-cell-selected .ant-picker-cell-inner {
        background: none !important;
        color: black;
    }

    .ant-picker-cell-inner .ant-picker-calendar-date .ant-picker-calendar-date-today {
        background: none !important;
        color: black;
    }

    .ant-picker-cell-inner:hover {
        background: none !important;
        color: black;
    }


    .ant-picker-calendar-full .ant-picker-panel .ant-picker-calendar-date-today {
        border: none !important;
    }

    .ant-picker-cell-in-view.ant-picker-cell-today .ant-picker-cell-inner::before {
        border: none !important;
    }
</style>
